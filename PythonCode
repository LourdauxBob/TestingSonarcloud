#imports
import json
import requests
requests.packages.urllib3.disable_warnings()

#IPs management interfaces routers
R1_mgmt_IP = "192.168.10.1"
R2_mgmt_IP = "192.168.10.2"

headers = { "Accept": "application/yang-data+json", 
            "Content-type":"application/yang-data+json"
           }

#Authentication credentials
basicauth = ("cisco", "cisco123!")

#Functie voor GigabitEthernet interface aan te maken via RESTCONF API
def put_interface(Router_mgmt_IP, interface_name, description, interface_ip, interface_subnetmask):
    
    api_url_ethernet = "https://" + Router_mgmt_IP + "/restconf/data/ietf-interfaces:interfaces/interface=" + interface_name.replace("/", "%2f")

    yangConfig_ethernet = {
        "ietf-interfaces:interface": {
            "name": interface_name,
            "description": description,
            "type": "iana-if-type:ethernetCsmacd",
            "enabled": True,
            "ietf-ip:ipv4": {
                "address": [
                    {
                        "ip": interface_ip,
                        "netmask": interface_subnetmask
                    }
                ]
            },
            "ietf-ip:ipv6": {}
        }
    }

    #Push the configuration to the router
    resp = requests.put(api_url_ethernet, data=json.dumps(yangConfig_ethernet), auth=basicauth, headers=headers, verify=False)

    if(resp.status_code >= 200 and resp.status_code <= 299):
        print("STATUS OK: {}".format(resp.status_code))
        print("GigabitEthernet interface toegevoegd/aangepast.")
    else:
        print('Error. Status Code: {} \nError message: {}'.format(resp.status_code,resp.json()))
        print("GigabitEthernet interface niet toegevoegd/aangepast.")

#Functie voor loopback interface aan te maken via RESTCONF API
def put_loopback(Router_mgmt_IP, interface_name, description, interface_ip, interface_subnetmask):
    
    api_url_loopback = "https://" + Router_mgmt_IP + "/restconf/data/ietf-interfaces:interfaces/interface=" + interface_name

    yangConfig_loopback = {
        "ietf-interfaces:interface": {
            "name": interface_name,
            "description": description,
            "type": "iana-if-type:softwareLoopback",
            "enabled": True,
            "ietf-ip:ipv4": {
                "address": [
                    {
                        "ip": interface_ip,
                        "netmask": interface_subnetmask
                    }
                ]
            },
            "ietf-ip:ipv6": {}
        }
    }

    #Push the configuration to the router
    resp = requests.put(api_url_loopback, data=json.dumps(yangConfig_loopback), auth=basicauth, headers=headers, verify=False)

    if(resp.status_code >= 200 and resp.status_code <= 299):
        print("STATUS OK: {}".format(resp.status_code))
        print("Loopbackinterface toegevoegd/aangepast.")
    else:
        print("Error. Status Code: {} \nError message: {}".format(resp.status_code,resp.json()))
        print("Loopbackinterface niet toegevoegd/aangepast.")

#Functie voor GET request van de routes
def get_routes():
    api_url = "https://192.168.10.1/restconf/data/ietf-routing:routing/routing-instance=default/routing-protocols/routing-protocol=static,1/"

    headers = { "Accept": "application/yang-data+json", "Content-type":"application/yang-data+json"}

    basicauth = ("cisco", "cisco123!")

    resp = requests.get(api_url, auth=basicauth, headers=headers, verify=False)

    print(resp)

    response_json = resp.json()
    print(json.dumps(response_json, indent=4))

    #Functie voor GET request van de interfaces
def get_int():
    api_url = "https://192.168.10.1/restconf/data/ietf-interfaces:interfaces/"

    headers = { "Accept": "application/yang-data+json", "Content-type":"application/yang-data+json"}

    basicauth = ("cisco", "cisco123!")

    resp = requests.get(api_url, auth=basicauth, headers=headers, verify=False)

    print(resp)

    response_json = resp.json()
    print(json.dumps(response_json, indent=4))


#Functie voor Routes aan te maken via RESTCONF API
def put_route_nexthop_ip(Router_mgmt_IP, destination_prefix1, nexthop_ip1):
    
    api_url_routes = "https://" + Router_mgmt_IP + "/restconf/data/ietf-routing:routing/routing-instance=default/routing-protocols/routing-protocol=static,1/"
    
    yangConfig_routes = {
    "ietf-routing:routing-protocol": {
        "type": "ietf-routing:static",
        "name": "1",
        "static-routes": {
            "ietf-ipv4-unicast-routing:ipv4": {
                "route": [
                    {
                        "destination-prefix": destination_prefix1,
                        "next-hop": {
                            "next-hop-address": nexthop_ip1
                        }
                    }

                ]
            }
        }}}

    #Push the configuration to the router
    resp = requests.put(api_url_routes, data=json.dumps(yangConfig_routes), auth=basicauth, headers=headers, verify=False)

    if(resp.status_code >= 200 and resp.status_code <= 299):
        print("STATUS OK: {}".format(resp.status_code))
        print("Route toegevoegd/aangepast.")
    else:
        print("Error. Status Code: {} \nError message: {}".format(resp.status_code,resp.json()))
        print("Route niet toegevoegd/aangepast.")


put_interface(R1_mgmt_IP, "GigabitEthernet0/0/0", "Mijn eerste GigabitEthernet interface", "10.10.10.1", "255.255.255.0")
put_interface(R1_mgmt_IP, "GigabitEthernet0/0/1", "Mijn tweede", "172.16.1.1", "255.255.255.252")

put_interface(R2_mgmt_IP, "GigabitEthernet0/0/0", "Mijn eerste GigabitEthernet interface", "10.10.20.1", "255.255.255.0")
put_interface(R2_mgmt_IP, "GigabitEthernet0/0/1", "Mijn tweede", "172.16.1.2", "255.255.255.252")
put_loopback(R2_mgmt_IP, "Loopback1", "Loopback op R2", "8.8.8.8", "255.255.255.0")

put_route_nexthop_ip(R1_mgmt_IP, "10.10.20.0/24", "172.16.1.2")
put_route_nexthop_ip(R1_mgmt_IP, "0.0.0.0/0", "172.16.1.2")
put_route_nexthop_ip(R2_mgmt_IP, "10.10.10.0/24", "172.16.1.1")

#TEST2



